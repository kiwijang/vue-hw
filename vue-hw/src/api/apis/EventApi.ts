// tslint:disable
/**
 * JWTToken_Auth_API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    AddEventJoinUserVM,
    EventVM,
} from '../models';

export interface ApiEventAddEventJoinUsersPostRequest {
    addEventJoinUserVM?: AddEventJoinUserVM;
}

export interface ApiEventCreateEventPostRequest {
    eventVM?: EventVM;
}

export interface ApiEventGetEventByIdPostRequest {
    id?: string;
}

export interface ApiEventUpdateEventPostRequest {
    eventVM?: EventVM;
}

/**
 * no description
 */
export class EventApi extends BaseAPI {

    /**
     */
    apiEventAddEventJoinUsersPost({ addEventJoinUserVM }: ApiEventAddEventJoinUsersPostRequest): Observable<void>
    apiEventAddEventJoinUsersPost({ addEventJoinUserVM }: ApiEventAddEventJoinUsersPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    apiEventAddEventJoinUsersPost({ addEventJoinUserVM }: ApiEventAddEventJoinUsersPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        return this.request<void>({
            url: '/api/Event/AddEventJoinUsers',
            method: 'POST',
            headers,
            body: addEventJoinUserVM,
        }, opts?.responseOpts);
    };

    /**
     */
    apiEventCreateEventPost({ eventVM }: ApiEventCreateEventPostRequest): Observable<void>
    apiEventCreateEventPost({ eventVM }: ApiEventCreateEventPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    apiEventCreateEventPost({ eventVM }: ApiEventCreateEventPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        return this.request<void>({
            url: '/api/Event/CreateEvent',
            method: 'POST',
            headers,
            body: eventVM,
        }, opts?.responseOpts);
    };

    /**
     */
    apiEventGetAllEventsPost(): Observable<Array<EventVM>>
    apiEventGetAllEventsPost(opts?: OperationOpts): Observable<AjaxResponse<Array<EventVM>>>
    apiEventGetAllEventsPost(opts?: OperationOpts): Observable<Array<EventVM> | AjaxResponse<Array<EventVM>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        return this.request<Array<EventVM>>({
            url: '/api/Event/GetAllEvents',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    apiEventGetEventByIdPost({ id }: ApiEventGetEventByIdPostRequest): Observable<EventVM>
    apiEventGetEventByIdPost({ id }: ApiEventGetEventByIdPostRequest, opts?: OperationOpts): Observable<AjaxResponse<EventVM>>
    apiEventGetEventByIdPost({ id }: ApiEventGetEventByIdPostRequest, opts?: OperationOpts): Observable<EventVM | AjaxResponse<EventVM>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        const query: HttpQuery = {};

        if (id != null) { query['id'] = id; }

        return this.request<EventVM>({
            url: '/api/Event/GetEventById',
            method: 'POST',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    apiEventUpdateEventPost({ eventVM }: ApiEventUpdateEventPostRequest): Observable<void>
    apiEventUpdateEventPost({ eventVM }: ApiEventUpdateEventPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    apiEventUpdateEventPost({ eventVM }: ApiEventUpdateEventPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // Bearer authentication
        };

        return this.request<void>({
            url: '/api/Event/UpdateEvent',
            method: 'POST',
            headers,
            body: eventVM,
        }, opts?.responseOpts);
    };

}
